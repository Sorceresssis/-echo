<template>
    <!-- 不能用id="" 否则Transition无效 -->
    <div class="leftBar">
        <div id="logo">Echo</div>
        <div id="menuWrapper">
            <div>
                <div>
                    <ul>
                        <!-- 添加Group输入框 -->
                        <li>
                            <div class="input-wrapper"
                                 v-if="isVisibleInputAddGroup">
                                <!-- onfocus写在v-focus前面  -->
                                <input v-model="inputModelAddGroup"
                                       type="text"
                                       maxlength="255"
                                       onfocus="this.select()"
                                       v-focus="isVisibleInputAddGroup"
                                       @keyup.enter="($event.target as HTMLInputElement)?.blur()"
                                       @blur="handleInputAddGroup">
                            </div>
                        </li>
                        <li v-for="(group, groupIndex) in groups"
                            :key="group.id">
                            <!-- 重命名输入框 -->
                            <div v-if="inputRenameGroupId == group.id"
                                 class="input-wrapper">
                                <span :class="{ rotateZ: isExpandGroup[groupIndex] }"
                                      class="iconfont angle">&#xe608;</span>
                                <input type="text"
                                       v-model="group.name"
                                       onfocus="this.select()"
                                       v-focus="inputRenameGroupId == group.id"
                                       @keyup.enter="($event.target as HTMLInputElement)?.blur()"
                                       @blur="renameGroup(group.id, group.name)">
                            </div>
                            <div v-else
                                 class="menuItem"
                                 @contextmenu="openCtm($event, groupIndex)"
                                 @click="isExpandGroup[groupIndex] = !isExpandGroup[groupIndex]"
                                 :draggable="true"
                                 @dragstart="dragstart(groupIndex)"
                                 @dragend="dragend()"
                                 @dragenter="dragenter($event, groupIndex)"
                                 @dragleave="dragleave($event)"
                                 @drop="dragleave($event)">
                                <span :class="{ rotateZ: isExpandGroup[groupIndex] }"
                                      class="iconfont angle">&#xe608;</span>
                                {{ group.name }}
                            </div>
                            <div class="contant"
                                 v-show="isExpandGroup[groupIndex]">
                                <ul>
                                    <!-- 添加library输入框 -->
                                    <li>
                                        <div v-if="addLibraryGroupIndex == groupIndex"
                                             class="input-wrapper ">
                                            <input type="text"
                                                   v-model="inputModelAddLibrary"
                                                   onfocus="this.select()"
                                                   v-focus="true"
                                                   @keyup.enter="($event.target as HTMLInputElement)?.blur()"
                                                   @blur="handleInputAddLibrary(group.id)">
                                        </div>
                                    </li>
                                    <li v-for="(library, libraryIndex) in group.librarys"
                                        :key="library.id">
                                        <!-- 重命名输入框 -->
                                        <div v-if="inputRenameLibraryId == library.id"
                                             class="input-wrapper">
                                            <input v-model="library.name"
                                                   onfocus="this.select()"
                                                   type="text"
                                                   class="input"
                                                   v-focus="inputRenameLibraryId == library.id"
                                                   @keyup.enter="($event.target as HTMLInputElement)?.blur()"
                                                   @blur="renameLibrary(library.id, library.name)">
                                        </div>
                                        <div v-else
                                             @contextmenu="openCtm($event, groupIndex, libraryIndex)"
                                             class="menuItem"
                                             :class="{ active: activeLibrary.id == library.id }"
                                             style="text-indent: 2em;"
                                             @click.stop="openLibrary(library)"
                                             :draggable="true"
                                             @dragstart="dragstart(groupIndex, libraryIndex)"
                                             @dragend="dragend()"
                                             @dragenter="dragenter($event, groupIndex, libraryIndex)"
                                             @dragleave="dragleave($event)"
                                             @drop="dragleave($event)">
                                            {{ library.name }}
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <el-dialog v-model="deleteDialogInfo.isVisibleDialog"
                   align-center
                   title="你确定要这样做吗"
                   width="350px"
                   class="dialog-confirm">
            <p>
                此操作<span style="font-weight: 700;">无法</span>撤销。这将永久删除数据
            </p>
            <p>
                请输入 <span style="font-weight: 700; user-select: text;">{{ deleteDialogInfo.deleteItemName }}</span>
                进行确认。
            </p>
            <el-input class="diaglog-input"
                      v-model="deleteDialogInfo.confirmInputName"></el-input>
            <template #footer>
                <span class="dialog-footer">
                    <el-button type="primary"
                               :class="{ 'confirmed': deleteDialogInfo.confirmInputName == deleteDialogInfo.deleteItemName }"
                               @click="handleDeleteDialog">
                        我明白后果，确认删除这个{{ deleteDialogInfo.deleteType }}
                    </el-button>
                </span>
            </template>
        </el-dialog>
    </div>
</template>

<script setup
        lang='ts'>

            /* group添加 */
            const isVisibleInputAddGroup = ref(false)
            const inputModelAddGroup = ref("新建组")
            const showInputAddGroup = () => {
                inputModelAddGroup.value = "新建组"
                isVisibleInputAddGroup.value = true
            }
            const handleInputAddGroup = async () => {
                // 关闭输入框
                isVisibleInputAddGroup.value = false
                // 写入数据库
                if (inputModelAddGroup.value === "") return
                let newGroupId: number | null = await window.electronAPI.addGroup(inputModelAddGroup.value)
                if (newGroupId) {
                    // 发出提示
                    ElMessage.success('添加组成功')
                    groups.value.unshift({ id: newGroupId, name: inputModelAddGroup.value, librarys: [] })
                    if (isExpandGroup.value.length < groups.value.length) {
                        isExpandGroup.value.unshift(false)
                    }
                    // 重新写入顺序
                    updataGroupOrder()
                }
                else {
                    ElMessage.error('添加组失败')
                }
            }

            /* library添加 */
            const addLibraryGroupIndex = ref(-1)
            const inputModelAddLibrary = ref("新建库")
            const showInputAddLibrary = () => {
                // 先展开group
                inputModelAddLibrary.value = "新建库"
                isExpandGroup.value[_FocusGroupIndex] = true
                addLibraryGroupIndex.value = _FocusGroupIndex
            }
            const handleInputAddLibrary = async (groupId: number) => {
                let addGroupIndex = addLibraryGroupIndex.value
                // 关闭输入框
                addLibraryGroupIndex.value = -1
                if (inputModelAddLibrary.value === "") return
                let newlibraryId: number | null = await window.electronAPI.addLibrary(groupId, inputModelAddLibrary.value)
                if (newlibraryId) {
                    ElMessage.success('添加库成功')
                    groups.value[addGroupIndex].librarys.unshift({ id: newlibraryId, name: inputModelAddLibrary.value })
                    // 重新写入顺序
                    updataLibraryOrder(addGroupIndex)
                } else {
                    ElMessage.error('添加库失败')
                }
            }

            /******************** 在数据库更新顺序 ********************/
            const updataGroupOrder = debounce(async () => {
                let groupsId: number[] = []
                groups.value.forEach(element => {
                    groupsId.push(element.id)
                });
                await window.electronAPI.updataOrderGroup(groupsId);
            }, 200)

            const updataLibraryOrder = debounce(async (groupIndex: number) => {
                let librarysId: number[] = []
                groups.value[groupIndex].librarys.forEach(element => {
                    librarysId.push(element.id)
                })
                await window.electronAPI.updataOrderLibrary(groups.value[groupIndex].id, librarysId)
            }, 200)

            /******************** 删除group和library ********************/
            const deleteDialogInfo = ref({
                isVisibleDialog: false,
                deleteType: "",
                deleteItemName: "",
                confirmInputName: "",
            })
            const openDeleteDialog = () => {
                // 删除旧数据
                deleteDialogInfo.value.confirmInputName = ""
                deleteDialogInfo.value.isVisibleDialog = true
                if (_FocusLibraryIndex == -1) {
                    deleteDialogInfo.value.deleteType = "组Group"
                    deleteDialogInfo.value.deleteItemName = groups.value[_FocusGroupIndex].name
                }
                else {
                    deleteDialogInfo.value.deleteType = "库Library"
                    deleteDialogInfo.value.deleteItemName = groups.value[_FocusGroupIndex].librarys[_FocusLibraryIndex].name
                }
            }
            const handleDeleteDialog = async () => {
                // 输入完整的名字才能删除
                if (deleteDialogInfo.value.confirmInputName != deleteDialogInfo.value.deleteItemName) return
                // 删除的library如果是正在被打开的，就传一个{id:0,name:""}
                if (_FocusLibraryIndex == -1) {
                    groups.value[_FocusGroupIndex].librarys.forEach(element => {
                        if (element.id == activeLibrary.value.id) {
                            openLibrary({ id: 0, name: "" })
                        }
                    });
                    if (await window.electronAPI.deleteGroup(groups.value[_FocusGroupIndex].id)) {
                        groups.value.splice(_FocusGroupIndex, 1)
                        isExpandGroup.value.splice(_FocusGroupIndex, 1)
                    }
                } else {
                    if (groups.value[_FocusGroupIndex].librarys[_FocusLibraryIndex].id == activeLibrary.value.id) {
                        openLibrary({ id: 0, name: "" })
                    }
                    if (await window.electronAPI.deleteLibrary(groups.value[_FocusGroupIndex].librarys[_FocusLibraryIndex].id)) {
                        groups.value[_FocusGroupIndex].librarys.splice(_FocusLibraryIndex, 1)
                    }
                }
                deleteDialogInfo.value.isVisibleDialog = false
            }
            /******************** 右键菜单移动library ********************/
            const moveLibrary = async (groupIndex: number) => {
                if (groupIndex == _FocusGroupIndex) {
                    ElMessage.error('已在该组')
                    return
                }
                // 删除拖动元素,添加到group第一个的位置
                let sourceLibrary: library = groups.value[_FocusGroupIndex].librarys.splice(_FocusLibraryIndex, 1)[0]
                groups.value[groupIndex].librarys.unshift(sourceLibrary)
                _FocusLibraryIndex = _ToLibraryIndex
                await window.electronAPI.moveLibrary(groups.value[groupIndex].id, sourceLibrary.id)
                updataLibraryOrder(groupIndex)
            }

            /******************** 拖动，移动和排序 ********************/
            let dragenterStyle: string | null
            const dragstart = (groupIndex: number, libraryIndex: number = -1) => {
                _FocusGroupIndex = groupIndex
                _FocusLibraryIndex = libraryIndex
                // 拖动的是group提示红色，library提示蓝色
                dragenterStyle = libraryIndex == -1 ? "3px solid #f77c7c" : "3px solid #7cccf7"
            }
            const dragend = async () => {
                // true/false 拖动的是group/library
                if (_FocusLibraryIndex == -1) {
                    if (_ToLibraryIndex == -1 && _FocusGroupIndex != _ToGroupIndex) {
                        // group改顺序,isExpandGroup顺序也要改
                        isExpandGroup.value.splice(_ToGroupIndex, 0, ...isExpandGroup.value.splice(_FocusGroupIndex, 1))
                        // 删除拖动元素,添加到拖到的位置
                        groups.value.splice(_ToGroupIndex, 0, ...groups.value.splice(_FocusGroupIndex, 1))
                        updataGroupOrder()
                    }
                }
                else {
                    const sourceLibrary: library = groups.value[_FocusGroupIndex].librarys[_FocusLibraryIndex]
                    // true/false 进入的是group/library
                    if (_ToLibraryIndex == -1) {
                        if (_FocusGroupIndex == _ToGroupIndex) {
                            ElMessage.error('已在该组')
                            return
                        }
                        else {
                            groups.value[_FocusGroupIndex].librarys.splice(_FocusLibraryIndex, 1)
                            groups.value[_ToGroupIndex].librarys.splice(0, 0, sourceLibrary)
                            isExpandGroup.value[_ToGroupIndex] = true
                        }
                    }
                    else {
                        groups.value[_FocusGroupIndex].librarys.splice(_FocusLibraryIndex, 1)
                        groups.value[_ToGroupIndex].librarys.splice(_ToLibraryIndex, 0, sourceLibrary)
                    }
                    // 先移动后删除
                    await window.electronAPI.moveLibrary(groups.value[_ToGroupIndex].id, sourceLibrary.id)
                    updataLibraryOrder(_ToGroupIndex)
                }
            }
            const dragenter = (e: any, groupIndex: number, libraryIndex: number = -1) => {
                e.preventDefault()
                _ToGroupIndex = groupIndex
                _ToLibraryIndex = libraryIndex
                // group托入library不显示样式
                if (_FocusLibraryIndex == -1 && _ToLibraryIndex != -1) return
                e.currentTarget.style.borderBottom = dragenterStyle
            }
            const dragleave = (e: MouseEvent) => {
                (e.currentTarget as HTMLDivElement).style.borderBottom = ""
            }
        </script>